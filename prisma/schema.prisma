// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(uuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(uuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Posts[]
    Votes         Votes[]
    Comments      Comments[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Posts {
    id        String     @id @default(uuid())
    title     String     @db.Text
    body      String     @db.Text
    userId    String
    // votes     Int        @default(0)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    user      User       @relation(fields: [userId], references: [id])
    Votes     Votes[]
    Comments  Comments[]
}

model Votes {
    id     String @id @default(uuid())
    userId String
    postId String
    user   User   @relation(fields: [userId], references: [id])
    post   Posts  @relation(fields: [postId], references: [id])
}

model Comments {
    id     String @id @default(uuid())
    userId String
    postId String
    body   String @db.Text
    user   User   @relation(fields: [userId], references: [id])
    post   Posts  @relation(fields: [postId], references: [id])
}
